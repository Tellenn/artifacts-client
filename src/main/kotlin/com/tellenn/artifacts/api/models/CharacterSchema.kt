/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api.models

import com.tellenn.artifacts.api.models.CharacterSkin
import com.tellenn.artifacts.api.models.InventorySlot

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param name Name of the character.
 * @param account Account name.
 * @param skin Character skin code.
 * @param level Combat level.
 * @param xp The current xp level of the combat level.
 * @param maxXp XP required to level up the character.
 * @param gold The numbers of gold on this character.
 * @param speed *Not available, on the roadmap. Character movement speed.
 * @param miningLevel Mining level.
 * @param miningXp The current xp level of the Mining skill.
 * @param miningMaxXp Mining XP required to level up the skill.
 * @param woodcuttingLevel Woodcutting level.
 * @param woodcuttingXp The current xp level of the Woodcutting skill.
 * @param woodcuttingMaxXp Woodcutting XP required to level up the skill.
 * @param fishingLevel Fishing level.
 * @param fishingXp The current xp level of the Fishing skill.
 * @param fishingMaxXp Fishing XP required to level up the skill.
 * @param weaponcraftingLevel Weaponcrafting level.
 * @param weaponcraftingXp The current xp level of the Weaponcrafting skill.
 * @param weaponcraftingMaxXp Weaponcrafting XP required to level up the skill.
 * @param gearcraftingLevel Gearcrafting level.
 * @param gearcraftingXp The current xp level of the Gearcrafting skill.
 * @param gearcraftingMaxXp Gearcrafting XP required to level up the skill.
 * @param jewelrycraftingLevel Jewelrycrafting level.
 * @param jewelrycraftingXp The current xp level of the Jewelrycrafting skill.
 * @param jewelrycraftingMaxXp Jewelrycrafting XP required to level up the skill.
 * @param cookingLevel The current xp level of the Cooking skill.
 * @param cookingXp Cooking XP.
 * @param cookingMaxXp Cooking XP required to level up the skill.
 * @param alchemyLevel Alchemy level.
 * @param alchemyXp Alchemy XP.
 * @param alchemyMaxXp Alchemy XP required to level up the skill.
 * @param hp Character actual HP.
 * @param maxHp Character max HP.
 * @param haste *Increase speed attack (reduce fight cooldown)
 * @param criticalStrike % Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x).
 * @param wisdom Wisdom increases the amount of XP gained from fights and skills (1% extra per 10 wisdom).
 * @param prospecting Prospecting increases the chances of getting drops from fights and skills (1% extra per 10 PP).
 * @param attackFire Fire attack.
 * @param attackEarth Earth attack.
 * @param attackWater Water attack.
 * @param attackAir Air attack.
 * @param dmg % Damage. Damage increases your attack in all elements.
 * @param dmgFire % Fire damage. Damage increases your fire attack.
 * @param dmgEarth % Earth damage. Damage increases your earth attack.
 * @param dmgWater % Water damage. Damage increases your water attack.
 * @param dmgAir % Air damage. Damage increases your air attack.
 * @param resFire % Fire resistance. Reduces fire attack.
 * @param resEarth % Earth resistance. Reduces earth attack.
 * @param resWater % Water resistance. Reduces water attack.
 * @param resAir % Air resistance. Reduces air attack.
 * @param x Character x coordinate.
 * @param y Character y coordinate.
 * @param cooldown Cooldown in seconds.
 * @param weaponSlot Weapon slot.
 * @param runeSlot Rune slot.
 * @param shieldSlot Shield slot.
 * @param helmetSlot Helmet slot.
 * @param bodyArmorSlot Body armor slot.
 * @param legArmorSlot Leg armor slot.
 * @param bootsSlot Boots slot.
 * @param ring1Slot Ring 1 slot.
 * @param ring2Slot Ring 2 slot.
 * @param amuletSlot Amulet slot.
 * @param artifact1Slot Artifact 1 slot.
 * @param artifact2Slot Artifact 2 slot.
 * @param artifact3Slot Artifact 3 slot.
 * @param utility1Slot Utility 1 slot.
 * @param utility1SlotQuantity Utility 1 quantity.
 * @param utility2Slot Utility 2 slot.
 * @param utility2SlotQuantity Utility 2 quantity.
 * @param bagSlot Bag slot.
 * @param task Task in progress.
 * @param taskType Task type.
 * @param taskProgress Task progression.
 * @param taskTotal Task total objective.
 * @param inventoryMaxItems Inventory max items.
 * @param cooldownExpiration Datetime Cooldown expiration.
 * @param inventory List of inventory slots.
 */


data class CharacterSchema (

    /* Name of the character. */
    @field:JsonProperty("name")
    val name: kotlin.String,

    /* Account name. */
    @field:JsonProperty("account")
    val account: kotlin.String,

    /* Character skin code. */
    @field:JsonProperty("skin")
    val skin: CharacterSkin,

    /* Combat level. */
    @field:JsonProperty("level")
    val level: kotlin.Int,

    /* The current xp level of the combat level. */
    @field:JsonProperty("xp")
    val xp: kotlin.Int,

    /* XP required to level up the character. */
    @field:JsonProperty("max_xp")
    val maxXp: kotlin.Int,

    /* The numbers of gold on this character. */
    @field:JsonProperty("gold")
    val gold: kotlin.Int,

    /* *Not available, on the roadmap. Character movement speed. */
    @field:JsonProperty("speed")
    val speed: kotlin.Int,

    /* Mining level. */
    @field:JsonProperty("mining_level")
    val miningLevel: kotlin.Int,

    /* The current xp level of the Mining skill. */
    @field:JsonProperty("mining_xp")
    val miningXp: kotlin.Int,

    /* Mining XP required to level up the skill. */
    @field:JsonProperty("mining_max_xp")
    val miningMaxXp: kotlin.Int,

    /* Woodcutting level. */
    @field:JsonProperty("woodcutting_level")
    val woodcuttingLevel: kotlin.Int,

    /* The current xp level of the Woodcutting skill. */
    @field:JsonProperty("woodcutting_xp")
    val woodcuttingXp: kotlin.Int,

    /* Woodcutting XP required to level up the skill. */
    @field:JsonProperty("woodcutting_max_xp")
    val woodcuttingMaxXp: kotlin.Int,

    /* Fishing level. */
    @field:JsonProperty("fishing_level")
    val fishingLevel: kotlin.Int,

    /* The current xp level of the Fishing skill. */
    @field:JsonProperty("fishing_xp")
    val fishingXp: kotlin.Int,

    /* Fishing XP required to level up the skill. */
    @field:JsonProperty("fishing_max_xp")
    val fishingMaxXp: kotlin.Int,

    /* Weaponcrafting level. */
    @field:JsonProperty("weaponcrafting_level")
    val weaponcraftingLevel: kotlin.Int,

    /* The current xp level of the Weaponcrafting skill. */
    @field:JsonProperty("weaponcrafting_xp")
    val weaponcraftingXp: kotlin.Int,

    /* Weaponcrafting XP required to level up the skill. */
    @field:JsonProperty("weaponcrafting_max_xp")
    val weaponcraftingMaxXp: kotlin.Int,

    /* Gearcrafting level. */
    @field:JsonProperty("gearcrafting_level")
    val gearcraftingLevel: kotlin.Int,

    /* The current xp level of the Gearcrafting skill. */
    @field:JsonProperty("gearcrafting_xp")
    val gearcraftingXp: kotlin.Int,

    /* Gearcrafting XP required to level up the skill. */
    @field:JsonProperty("gearcrafting_max_xp")
    val gearcraftingMaxXp: kotlin.Int,

    /* Jewelrycrafting level. */
    @field:JsonProperty("jewelrycrafting_level")
    val jewelrycraftingLevel: kotlin.Int,

    /* The current xp level of the Jewelrycrafting skill. */
    @field:JsonProperty("jewelrycrafting_xp")
    val jewelrycraftingXp: kotlin.Int,

    /* Jewelrycrafting XP required to level up the skill. */
    @field:JsonProperty("jewelrycrafting_max_xp")
    val jewelrycraftingMaxXp: kotlin.Int,

    /* The current xp level of the Cooking skill. */
    @field:JsonProperty("cooking_level")
    val cookingLevel: kotlin.Int,

    /* Cooking XP. */
    @field:JsonProperty("cooking_xp")
    val cookingXp: kotlin.Int,

    /* Cooking XP required to level up the skill. */
    @field:JsonProperty("cooking_max_xp")
    val cookingMaxXp: kotlin.Int,

    /* Alchemy level. */
    @field:JsonProperty("alchemy_level")
    val alchemyLevel: kotlin.Int,

    /* Alchemy XP. */
    @field:JsonProperty("alchemy_xp")
    val alchemyXp: kotlin.Int,

    /* Alchemy XP required to level up the skill. */
    @field:JsonProperty("alchemy_max_xp")
    val alchemyMaxXp: kotlin.Int,

    /* Character actual HP. */
    @field:JsonProperty("hp")
    val hp: kotlin.Int,

    /* Character max HP. */
    @field:JsonProperty("max_hp")
    val maxHp: kotlin.Int,

    /* *Increase speed attack (reduce fight cooldown) */
    @field:JsonProperty("haste")
    val haste: kotlin.Int,

    /* % Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x). */
    @field:JsonProperty("critical_strike")
    val criticalStrike: kotlin.Int,

    /* Wisdom increases the amount of XP gained from fights and skills (1% extra per 10 wisdom). */
    @field:JsonProperty("wisdom")
    val wisdom: kotlin.Int,

    /* Prospecting increases the chances of getting drops from fights and skills (1% extra per 10 PP). */
    @field:JsonProperty("prospecting")
    val prospecting: kotlin.Int,

    /* Fire attack. */
    @field:JsonProperty("attack_fire")
    val attackFire: kotlin.Int,

    /* Earth attack. */
    @field:JsonProperty("attack_earth")
    val attackEarth: kotlin.Int,

    /* Water attack. */
    @field:JsonProperty("attack_water")
    val attackWater: kotlin.Int,

    /* Air attack. */
    @field:JsonProperty("attack_air")
    val attackAir: kotlin.Int,

    /* % Damage. Damage increases your attack in all elements. */
    @field:JsonProperty("dmg")
    val dmg: kotlin.Int,

    /* % Fire damage. Damage increases your fire attack. */
    @field:JsonProperty("dmg_fire")
    val dmgFire: kotlin.Int,

    /* % Earth damage. Damage increases your earth attack. */
    @field:JsonProperty("dmg_earth")
    val dmgEarth: kotlin.Int,

    /* % Water damage. Damage increases your water attack. */
    @field:JsonProperty("dmg_water")
    val dmgWater: kotlin.Int,

    /* % Air damage. Damage increases your air attack. */
    @field:JsonProperty("dmg_air")
    val dmgAir: kotlin.Int,

    /* % Fire resistance. Reduces fire attack. */
    @field:JsonProperty("res_fire")
    val resFire: kotlin.Int,

    /* % Earth resistance. Reduces earth attack. */
    @field:JsonProperty("res_earth")
    val resEarth: kotlin.Int,

    /* % Water resistance. Reduces water attack. */
    @field:JsonProperty("res_water")
    val resWater: kotlin.Int,

    /* % Air resistance. Reduces air attack. */
    @field:JsonProperty("res_air")
    val resAir: kotlin.Int,

    /* Character x coordinate. */
    @field:JsonProperty("x")
    val x: kotlin.Int,

    /* Character y coordinate. */
    @field:JsonProperty("y")
    val y: kotlin.Int,

    /* Cooldown in seconds. */
    @field:JsonProperty("cooldown")
    val cooldown: kotlin.Int,

    /* Weapon slot. */
    @field:JsonProperty("weapon_slot")
    val weaponSlot: kotlin.String,

    /* Rune slot. */
    @field:JsonProperty("rune_slot")
    val runeSlot: kotlin.String,

    /* Shield slot. */
    @field:JsonProperty("shield_slot")
    val shieldSlot: kotlin.String,

    /* Helmet slot. */
    @field:JsonProperty("helmet_slot")
    val helmetSlot: kotlin.String,

    /* Body armor slot. */
    @field:JsonProperty("body_armor_slot")
    val bodyArmorSlot: kotlin.String,

    /* Leg armor slot. */
    @field:JsonProperty("leg_armor_slot")
    val legArmorSlot: kotlin.String,

    /* Boots slot. */
    @field:JsonProperty("boots_slot")
    val bootsSlot: kotlin.String,

    /* Ring 1 slot. */
    @field:JsonProperty("ring1_slot")
    val ring1Slot: kotlin.String,

    /* Ring 2 slot. */
    @field:JsonProperty("ring2_slot")
    val ring2Slot: kotlin.String,

    /* Amulet slot. */
    @field:JsonProperty("amulet_slot")
    val amuletSlot: kotlin.String,

    /* Artifact 1 slot. */
    @field:JsonProperty("artifact1_slot")
    val artifact1Slot: kotlin.String,

    /* Artifact 2 slot. */
    @field:JsonProperty("artifact2_slot")
    val artifact2Slot: kotlin.String,

    /* Artifact 3 slot. */
    @field:JsonProperty("artifact3_slot")
    val artifact3Slot: kotlin.String,

    /* Utility 1 slot. */
    @field:JsonProperty("utility1_slot")
    val utility1Slot: kotlin.String,

    /* Utility 1 quantity. */
    @field:JsonProperty("utility1_slot_quantity")
    val utility1SlotQuantity: kotlin.Int,

    /* Utility 2 slot. */
    @field:JsonProperty("utility2_slot")
    val utility2Slot: kotlin.String,

    /* Utility 2 quantity. */
    @field:JsonProperty("utility2_slot_quantity")
    val utility2SlotQuantity: kotlin.Int,

    /* Bag slot. */
    @field:JsonProperty("bag_slot")
    val bagSlot: kotlin.String,

    /* Task in progress. */
    @field:JsonProperty("task")
    val task: kotlin.String,

    /* Task type. */
    @field:JsonProperty("task_type")
    val taskType: kotlin.String,

    /* Task progression. */
    @field:JsonProperty("task_progress")
    val taskProgress: kotlin.Int,

    /* Task total objective. */
    @field:JsonProperty("task_total")
    val taskTotal: kotlin.Int,

    /* Inventory max items. */
    @field:JsonProperty("inventory_max_items")
    val inventoryMaxItems: kotlin.Int,

    /* Datetime Cooldown expiration. */
    @field:JsonProperty("cooldown_expiration")
    val cooldownExpiration: java.time.OffsetDateTime? = null,

    /* List of inventory slots. */
    @field:JsonProperty("inventory")
    val inventory: kotlin.collections.List<InventorySlot>? = null

)

