/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * Values: weapon,shield,helmet,body_armor,leg_armor,boots,ring1,ring2,amulet,artifact1,artifact2,artifact3,utility1,utility2,bag,rune
 */

enum class ItemSlot(val value: kotlin.String) {

    @JsonProperty(value = "weapon")
    weapon("weapon"),

    @JsonProperty(value = "shield")
    shield("shield"),

    @JsonProperty(value = "helmet")
    helmet("helmet"),

    @JsonProperty(value = "body_armor")
    body_armor("body_armor"),

    @JsonProperty(value = "leg_armor")
    leg_armor("leg_armor"),

    @JsonProperty(value = "boots")
    boots("boots"),

    @JsonProperty(value = "ring1")
    ring1("ring1"),

    @JsonProperty(value = "ring2")
    ring2("ring2"),

    @JsonProperty(value = "amulet")
    amulet("amulet"),

    @JsonProperty(value = "artifact1")
    artifact1("artifact1"),

    @JsonProperty(value = "artifact2")
    artifact2("artifact2"),

    @JsonProperty(value = "artifact3")
    artifact3("artifact3"),

    @JsonProperty(value = "utility1")
    utility1("utility1"),

    @JsonProperty(value = "utility2")
    utility2("utility2"),

    @JsonProperty(value = "bag")
    bag("bag"),

    @JsonProperty(value = "rune")
    rune("rune");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ItemSlot) "$data" else null

        /**
         * Returns a valid [ItemSlot] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ItemSlot? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

