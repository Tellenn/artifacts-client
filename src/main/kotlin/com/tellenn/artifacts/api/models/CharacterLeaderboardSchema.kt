/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api.models

import com.tellenn.artifacts.api.models.AccountStatus

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param position Position in the leaderboard.
 * @param name Character name.
 * @param account Account name.
 * @param status Member status.
 * @param skin Character skin code.
 * @param level Combat level.
 * @param totalXp Total XP of your character.
 * @param miningLevel Mining level.
 * @param miningTotalXp Mining total xp.
 * @param woodcuttingLevel Woodcutting level.
 * @param woodcuttingTotalXp Woodcutting total xp.
 * @param fishingLevel Fishing level.
 * @param fishingTotalXp Fishing total xp.
 * @param weaponcraftingLevel Weaponcrafting level.
 * @param weaponcraftingTotalXp Weaponcrafting total xp.
 * @param gearcraftingLevel Gearcrafting level.
 * @param gearcraftingTotalXp Gearcrafting total xp.
 * @param jewelrycraftingLevel Jewelrycrafting level.
 * @param jewelrycraftingTotalXp Jewelrycrafting total xp.
 * @param cookingLevel Cooking level.
 * @param cookingTotalXp Cooking total xp.
 * @param alchemyLevel Alchemy level.
 * @param alchemyTotalXp Alchemy total xp.
 * @param gold The numbers of gold on this character.
 */


data class CharacterLeaderboardSchema (

    /* Position in the leaderboard. */
    @field:JsonProperty("position")
    val position: kotlin.Int,

    /* Character name. */
    @field:JsonProperty("name")
    val name: kotlin.String,

    /* Account name. */
    @field:JsonProperty("account")
    val account: kotlin.String,

    /* Member status. */
    @field:JsonProperty("status")
    val status: AccountStatus,

    /* Character skin code. */
    @field:JsonProperty("skin")
    val skin: kotlin.String,

    /* Combat level. */
    @field:JsonProperty("level")
    val level: kotlin.Int,

    /* Total XP of your character. */
    @field:JsonProperty("total_xp")
    val totalXp: kotlin.Int,

    /* Mining level. */
    @field:JsonProperty("mining_level")
    val miningLevel: kotlin.Int,

    /* Mining total xp. */
    @field:JsonProperty("mining_total_xp")
    val miningTotalXp: kotlin.Int,

    /* Woodcutting level. */
    @field:JsonProperty("woodcutting_level")
    val woodcuttingLevel: kotlin.Int,

    /* Woodcutting total xp. */
    @field:JsonProperty("woodcutting_total_xp")
    val woodcuttingTotalXp: kotlin.Int,

    /* Fishing level. */
    @field:JsonProperty("fishing_level")
    val fishingLevel: kotlin.Int,

    /* Fishing total xp. */
    @field:JsonProperty("fishing_total_xp")
    val fishingTotalXp: kotlin.Int,

    /* Weaponcrafting level. */
    @field:JsonProperty("weaponcrafting_level")
    val weaponcraftingLevel: kotlin.Int,

    /* Weaponcrafting total xp. */
    @field:JsonProperty("weaponcrafting_total_xp")
    val weaponcraftingTotalXp: kotlin.Int,

    /* Gearcrafting level. */
    @field:JsonProperty("gearcrafting_level")
    val gearcraftingLevel: kotlin.Int,

    /* Gearcrafting total xp. */
    @field:JsonProperty("gearcrafting_total_xp")
    val gearcraftingTotalXp: kotlin.Int,

    /* Jewelrycrafting level. */
    @field:JsonProperty("jewelrycrafting_level")
    val jewelrycraftingLevel: kotlin.Int,

    /* Jewelrycrafting total xp. */
    @field:JsonProperty("jewelrycrafting_total_xp")
    val jewelrycraftingTotalXp: kotlin.Int,

    /* Cooking level. */
    @field:JsonProperty("cooking_level")
    val cookingLevel: kotlin.Int,

    /* Cooking total xp. */
    @field:JsonProperty("cooking_total_xp")
    val cookingTotalXp: kotlin.Int,

    /* Alchemy level. */
    @field:JsonProperty("alchemy_level")
    val alchemyLevel: kotlin.Int,

    /* Alchemy total xp. */
    @field:JsonProperty("alchemy_total_xp")
    val alchemyTotalXp: kotlin.Int,

    /* The numbers of gold on this character. */
    @field:JsonProperty("gold")
    val gold: kotlin.Int

)

