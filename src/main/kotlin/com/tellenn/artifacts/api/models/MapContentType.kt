/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * Values: monster,resource,workshop,bank,grand_exchange,tasks_master,npc
 */

enum class MapContentType(val value: kotlin.String) {

    @JsonProperty(value = "monster")
    monster("monster"),

    @JsonProperty(value = "resource")
    resource("resource"),

    @JsonProperty(value = "workshop")
    workshop("workshop"),

    @JsonProperty(value = "bank")
    bank("bank"),

    @JsonProperty(value = "grand_exchange")
    grand_exchange("grand_exchange"),

    @JsonProperty(value = "tasks_master")
    tasks_master("tasks_master"),

    @JsonProperty(value = "npc")
    npc("npc");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is MapContentType) "$data" else null

        /**
         * Returns a valid [MapContentType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): MapContentType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

