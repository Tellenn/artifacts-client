/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * Values: utility,body_armor,weapon,resource,leg_armor,helmet,boots,shield,amulet,ring,artifact,currency,consumable,rune,bag
 */

enum class ItemType(val value: kotlin.String) {

    @JsonProperty(value = "utility")
    utility("utility"),

    @JsonProperty(value = "body_armor")
    body_armor("body_armor"),

    @JsonProperty(value = "weapon")
    weapon("weapon"),

    @JsonProperty(value = "resource")
    resource("resource"),

    @JsonProperty(value = "leg_armor")
    leg_armor("leg_armor"),

    @JsonProperty(value = "helmet")
    helmet("helmet"),

    @JsonProperty(value = "boots")
    boots("boots"),

    @JsonProperty(value = "shield")
    shield("shield"),

    @JsonProperty(value = "amulet")
    amulet("amulet"),

    @JsonProperty(value = "ring")
    ring("ring"),

    @JsonProperty(value = "artifact")
    artifact("artifact"),

    @JsonProperty(value = "currency")
    currency("currency"),

    @JsonProperty(value = "consumable")
    consumable("consumable"),

    @JsonProperty(value = "rune")
    rune("rune"),

    @JsonProperty(value = "bag")
    bag("bag");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ItemType) "$data" else null

        /**
         * Returns a valid [ItemType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ItemType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

