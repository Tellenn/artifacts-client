/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api.models

import com.tellenn.artifacts.api.models.ConditionSchema
import com.tellenn.artifacts.api.models.ItemSchemaCraft
import com.tellenn.artifacts.api.models.SimpleEffectSchema

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param name Item name.
 * @param code Item code. This is the item's unique identifier (ID).
 * @param level Item level.
 * @param type Item type.
 * @param subtype Item subtype.
 * @param description Item description.
 * @param tradeable Item tradeable status. A non-tradeable item cannot be exchanged or sold.
 * @param conditions Item conditions. If applicable. Conditions for using or equipping the item.
 * @param effects List of object effects. For equipment, it will include item stats.
 * @param craft 
 */


data class ItemSchema (

    /* Item name. */
    @field:JsonProperty("name")
    val name: kotlin.String,

    /* Item code. This is the item's unique identifier (ID). */
    @field:JsonProperty("code")
    val code: kotlin.String,

    /* Item level. */
    @field:JsonProperty("level")
    val level: kotlin.Int,

    /* Item type. */
    @field:JsonProperty("type")
    val type: kotlin.String,

    /* Item subtype. */
    @field:JsonProperty("subtype")
    val subtype: kotlin.String,

    /* Item description. */
    @field:JsonProperty("description")
    val description: kotlin.String,

    /* Item tradeable status. A non-tradeable item cannot be exchanged or sold. */
    @field:JsonProperty("tradeable")
    val tradeable: kotlin.Boolean,

    /* Item conditions. If applicable. Conditions for using or equipping the item. */
    @field:JsonProperty("conditions")
    val conditions: kotlin.collections.List<ConditionSchema>? = null,

    /* List of object effects. For equipment, it will include item stats. */
    @field:JsonProperty("effects")
    val effects: kotlin.collections.List<SimpleEffectSchema>? = null,

    @field:JsonProperty("craft")
    val craft: ItemSchemaCraft? = null

)

