/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * Values: spawn,movement,fight,crafting,gathering,buy_ge,sell_ge,buy_npc,sell_npc,cancel_ge,delete_item,deposit_item,withdraw_item,deposit_gold,withdraw_gold,equip,unequip,new_task,task_exchange,task_cancelled,task_completed,task_trade,christmas_exchange,recycling,rest,use,buy_bank_expansion,achievement,give_item,give_gold,receive_item,receive_gold,change_skin,rename
 */

enum class LogType(val value: kotlin.String) {

    @JsonProperty(value = "spawn")
    spawn("spawn"),

    @JsonProperty(value = "movement")
    movement("movement"),

    @JsonProperty(value = "fight")
    fight("fight"),

    @JsonProperty(value = "crafting")
    crafting("crafting"),

    @JsonProperty(value = "gathering")
    gathering("gathering"),

    @JsonProperty(value = "buy_ge")
    buy_ge("buy_ge"),

    @JsonProperty(value = "sell_ge")
    sell_ge("sell_ge"),

    @JsonProperty(value = "buy_npc")
    buy_npc("buy_npc"),

    @JsonProperty(value = "sell_npc")
    sell_npc("sell_npc"),

    @JsonProperty(value = "cancel_ge")
    cancel_ge("cancel_ge"),

    @JsonProperty(value = "delete_item")
    delete_item("delete_item"),

    @JsonProperty(value = "deposit_item")
    deposit_item("deposit_item"),

    @JsonProperty(value = "withdraw_item")
    withdraw_item("withdraw_item"),

    @JsonProperty(value = "deposit_gold")
    deposit_gold("deposit_gold"),

    @JsonProperty(value = "withdraw_gold")
    withdraw_gold("withdraw_gold"),

    @JsonProperty(value = "equip")
    equip("equip"),

    @JsonProperty(value = "unequip")
    unequip("unequip"),

    @JsonProperty(value = "new_task")
    new_task("new_task"),

    @JsonProperty(value = "task_exchange")
    task_exchange("task_exchange"),

    @JsonProperty(value = "task_cancelled")
    task_cancelled("task_cancelled"),

    @JsonProperty(value = "task_completed")
    task_completed("task_completed"),

    @JsonProperty(value = "task_trade")
    task_trade("task_trade"),

    @JsonProperty(value = "christmas_exchange")
    christmas_exchange("christmas_exchange"),

    @JsonProperty(value = "recycling")
    recycling("recycling"),

    @JsonProperty(value = "rest")
    rest("rest"),

    @JsonProperty(value = "use")
    use("use"),

    @JsonProperty(value = "buy_bank_expansion")
    buy_bank_expansion("buy_bank_expansion"),

    @JsonProperty(value = "achievement")
    achievement("achievement"),

    @JsonProperty(value = "give_item")
    give_item("give_item"),

    @JsonProperty(value = "give_gold")
    give_gold("give_gold"),

    @JsonProperty(value = "receive_item")
    receive_item("receive_item"),

    @JsonProperty(value = "receive_gold")
    receive_gold("receive_gold"),

    @JsonProperty(value = "change_skin")
    change_skin("change_skin"),

    @JsonProperty(value = "rename")
    rename("rename");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is LogType) "$data" else null

        /**
         * Returns a valid [LogType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): LogType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

