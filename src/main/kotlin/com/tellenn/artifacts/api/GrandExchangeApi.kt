/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.tellenn.artifacts.api.models.DataPageGEOrderSchema
import com.tellenn.artifacts.api.models.DataPageGeOrderHistorySchema
import com.tellenn.artifacts.api.models.GEOrderReponseSchema

import com.fasterxml.jackson.annotation.JsonProperty

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.tellenn.artifacts.api.infrastructure.ApiClient
import com.tellenn.artifacts.api.infrastructure.ApiResponse
import com.tellenn.artifacts.api.infrastructure.ClientException
import com.tellenn.artifacts.api.infrastructure.ClientError
import com.tellenn.artifacts.api.infrastructure.ServerException
import com.tellenn.artifacts.api.infrastructure.ServerError
import com.tellenn.artifacts.api.infrastructure.MultiValueMap
import com.tellenn.artifacts.api.infrastructure.PartConfig
import com.tellenn.artifacts.api.infrastructure.RequestConfig
import com.tellenn.artifacts.api.infrastructure.RequestMethod
import com.tellenn.artifacts.api.infrastructure.ResponseType
import com.tellenn.artifacts.api.infrastructure.Success
import com.tellenn.artifacts.api.infrastructure.toMultiValue

class GrandExchangeApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Get Ge Sell History
     * Fetch the sales history of the item for the last 7 days.
     * @param code The code of the item.
     * @param seller The seller (account name) of the item. (optional)
     * @param buyer The buyer (account name) of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageGeOrderHistorySchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getGeSellHistoryGrandexchangeHistoryCodeGet(code: kotlin.String, seller: kotlin.String? = null, buyer: kotlin.String? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageGeOrderHistorySchema = withContext(Dispatchers.IO) {
        val localVarResponse = getGeSellHistoryGrandexchangeHistoryCodeGetWithHttpInfo(code = code, seller = seller, buyer = buyer, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageGeOrderHistorySchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ge Sell History
     * Fetch the sales history of the item for the last 7 days.
     * @param code The code of the item.
     * @param seller The seller (account name) of the item. (optional)
     * @param buyer The buyer (account name) of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageGeOrderHistorySchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getGeSellHistoryGrandexchangeHistoryCodeGetWithHttpInfo(code: kotlin.String, seller: kotlin.String?, buyer: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageGeOrderHistorySchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getGeSellHistoryGrandexchangeHistoryCodeGetRequestConfig(code = code, seller = seller, buyer = buyer, page = page, size = size)

        return@withContext request<Unit, DataPageGeOrderHistorySchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGeSellHistoryGrandexchangeHistoryCodeGet
     *
     * @param code The code of the item.
     * @param seller The seller (account name) of the item. (optional)
     * @param buyer The buyer (account name) of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getGeSellHistoryGrandexchangeHistoryCodeGetRequestConfig(code: kotlin.String, seller: kotlin.String?, buyer: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (seller != null) {
                    put("seller", listOf(seller.toString()))
                }
                if (buyer != null) {
                    put("buyer", listOf(buyer.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/grandexchange/history/{code}".replace("{"+"code"+"}", encodeURIComponent(code.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Ge Sell Order
     * Retrieve the sell order of a item.
     * @param id The id of the order.
     * @return GEOrderReponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getGeSellOrderGrandexchangeOrdersIdGet(id: kotlin.String) : GEOrderReponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getGeSellOrderGrandexchangeOrdersIdGetWithHttpInfo(id = id)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GEOrderReponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ge Sell Order
     * Retrieve the sell order of a item.
     * @param id The id of the order.
     * @return ApiResponse<GEOrderReponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getGeSellOrderGrandexchangeOrdersIdGetWithHttpInfo(id: kotlin.String) : ApiResponse<GEOrderReponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getGeSellOrderGrandexchangeOrdersIdGetRequestConfig(id = id)

        return@withContext request<Unit, GEOrderReponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGeSellOrderGrandexchangeOrdersIdGet
     *
     * @param id The id of the order.
     * @return RequestConfig
     */
    fun getGeSellOrderGrandexchangeOrdersIdGetRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/grandexchange/orders/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Ge Sell Orders
     * Fetch all sell orders.
     * @param code The code of the item. (optional)
     * @param seller The seller (account name) of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageGEOrderSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getGeSellOrdersGrandexchangeOrdersGet(code: kotlin.String? = null, seller: kotlin.String? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageGEOrderSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getGeSellOrdersGrandexchangeOrdersGetWithHttpInfo(code = code, seller = seller, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageGEOrderSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ge Sell Orders
     * Fetch all sell orders.
     * @param code The code of the item. (optional)
     * @param seller The seller (account name) of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageGEOrderSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getGeSellOrdersGrandexchangeOrdersGetWithHttpInfo(code: kotlin.String?, seller: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageGEOrderSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getGeSellOrdersGrandexchangeOrdersGetRequestConfig(code = code, seller = seller, page = page, size = size)

        return@withContext request<Unit, DataPageGEOrderSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGeSellOrdersGrandexchangeOrdersGet
     *
     * @param code The code of the item. (optional)
     * @param seller The seller (account name) of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getGeSellOrdersGrandexchangeOrdersGetRequestConfig(code: kotlin.String?, seller: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (code != null) {
                    put("code", listOf(code.toString()))
                }
                if (seller != null) {
                    put("seller", listOf(seller.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/grandexchange/orders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
