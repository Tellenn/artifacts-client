/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.tellenn.artifacts.api.models.DataPageNPCItem
import com.tellenn.artifacts.api.models.DataPageNPCSchema
import com.tellenn.artifacts.api.models.NPCResponseSchema
import com.tellenn.artifacts.api.models.NPCType

import com.fasterxml.jackson.annotation.JsonProperty

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.tellenn.artifacts.api.infrastructure.ApiClient
import com.tellenn.artifacts.api.infrastructure.ApiResponse
import com.tellenn.artifacts.api.infrastructure.ClientException
import com.tellenn.artifacts.api.infrastructure.ClientError
import com.tellenn.artifacts.api.infrastructure.ServerException
import com.tellenn.artifacts.api.infrastructure.ServerError
import com.tellenn.artifacts.api.infrastructure.MultiValueMap
import com.tellenn.artifacts.api.infrastructure.PartConfig
import com.tellenn.artifacts.api.infrastructure.RequestConfig
import com.tellenn.artifacts.api.infrastructure.RequestMethod
import com.tellenn.artifacts.api.infrastructure.ResponseType
import com.tellenn.artifacts.api.infrastructure.Success
import com.tellenn.artifacts.api.infrastructure.toMultiValue

class NPCsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Get All Npcs Items
     * Retrieve the list of all NPC items.
     * @param code The code of the item. (optional)
     * @param npc The code of the npc. (optional)
     * @param currency The code of the currency. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageNPCItem
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAllNpcsItemsNpcsItemsGet(code: kotlin.String? = null, npc: kotlin.String? = null, currency: kotlin.String? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageNPCItem = withContext(Dispatchers.IO) {
        val localVarResponse = getAllNpcsItemsNpcsItemsGetWithHttpInfo(code = code, npc = npc, currency = currency, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageNPCItem
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get All Npcs Items
     * Retrieve the list of all NPC items.
     * @param code The code of the item. (optional)
     * @param npc The code of the npc. (optional)
     * @param currency The code of the currency. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageNPCItem?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAllNpcsItemsNpcsItemsGetWithHttpInfo(code: kotlin.String?, npc: kotlin.String?, currency: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageNPCItem?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAllNpcsItemsNpcsItemsGetRequestConfig(code = code, npc = npc, currency = currency, page = page, size = size)

        return@withContext request<Unit, DataPageNPCItem>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllNpcsItemsNpcsItemsGet
     *
     * @param code The code of the item. (optional)
     * @param npc The code of the npc. (optional)
     * @param currency The code of the currency. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getAllNpcsItemsNpcsItemsGetRequestConfig(code: kotlin.String?, npc: kotlin.String?, currency: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (code != null) {
                    put("code", listOf(code.toString()))
                }
                if (npc != null) {
                    put("npc", listOf(npc.toString()))
                }
                if (currency != null) {
                    put("currency", listOf(currency.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/npcs/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get All Npcs
     * Fetch NPCs details.
     * @param name Name of the npc. (optional)
     * @param type The type of the NPC. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageNPCSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAllNpcsNpcsDetailsGet(name: kotlin.String? = null, type: NPCType? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageNPCSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getAllNpcsNpcsDetailsGetWithHttpInfo(name = name, type = type, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageNPCSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get All Npcs
     * Fetch NPCs details.
     * @param name Name of the npc. (optional)
     * @param type The type of the NPC. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageNPCSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAllNpcsNpcsDetailsGetWithHttpInfo(name: kotlin.String?, type: NPCType?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageNPCSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAllNpcsNpcsDetailsGetRequestConfig(name = name, type = type, page = page, size = size)

        return@withContext request<Unit, DataPageNPCSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllNpcsNpcsDetailsGet
     *
     * @param name Name of the npc. (optional)
     * @param type The type of the NPC. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getAllNpcsNpcsDetailsGetRequestConfig(name: kotlin.String?, type: NPCType?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/npcs/details",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Npc Items
     * Retrieve the items list of a NPC. If the NPC has items to buy, sell or trade, they will be displayed.
     * @param code The code of the NPC.
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageNPCItem
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getNpcItemsNpcsItemsCodeGet(code: kotlin.String, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageNPCItem = withContext(Dispatchers.IO) {
        val localVarResponse = getNpcItemsNpcsItemsCodeGetWithHttpInfo(code = code, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageNPCItem
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Npc Items
     * Retrieve the items list of a NPC. If the NPC has items to buy, sell or trade, they will be displayed.
     * @param code The code of the NPC.
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageNPCItem?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getNpcItemsNpcsItemsCodeGetWithHttpInfo(code: kotlin.String, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageNPCItem?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getNpcItemsNpcsItemsCodeGetRequestConfig(code = code, page = page, size = size)

        return@withContext request<Unit, DataPageNPCItem>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getNpcItemsNpcsItemsCodeGet
     *
     * @param code The code of the NPC.
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getNpcItemsNpcsItemsCodeGetRequestConfig(code: kotlin.String, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/npcs/items/{code}".replace("{"+"code"+"}", encodeURIComponent(code.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Npc
     * Retrieve the details of a NPC.
     * @param code The code of the NPC.
     * @return NPCResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getNpcNpcsDetailsCodeGet(code: kotlin.String) : NPCResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getNpcNpcsDetailsCodeGetWithHttpInfo(code = code)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as NPCResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Npc
     * Retrieve the details of a NPC.
     * @param code The code of the NPC.
     * @return ApiResponse<NPCResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getNpcNpcsDetailsCodeGetWithHttpInfo(code: kotlin.String) : ApiResponse<NPCResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getNpcNpcsDetailsCodeGetRequestConfig(code = code)

        return@withContext request<Unit, NPCResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getNpcNpcsDetailsCodeGet
     *
     * @param code The code of the NPC.
     * @return RequestConfig
     */
    fun getNpcNpcsDetailsCodeGetRequestConfig(code: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/npcs/details/{code}".replace("{"+"code"+"}", encodeURIComponent(code.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
