/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.tellenn.artifacts.api.models.BankResponseSchema
import com.tellenn.artifacts.api.models.ChangePassword
import com.tellenn.artifacts.api.models.DataPageGEOrderSchema
import com.tellenn.artifacts.api.models.DataPageGeOrderHistorySchema
import com.tellenn.artifacts.api.models.DataPageSimpleItemSchema
import com.tellenn.artifacts.api.models.MyAccountDetailsSchema
import com.tellenn.artifacts.api.models.ResponseSchema

import com.fasterxml.jackson.annotation.JsonProperty

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.tellenn.artifacts.api.infrastructure.ApiClient
import com.tellenn.artifacts.api.infrastructure.ApiResponse
import com.tellenn.artifacts.api.infrastructure.ClientException
import com.tellenn.artifacts.api.infrastructure.ClientError
import com.tellenn.artifacts.api.infrastructure.ServerException
import com.tellenn.artifacts.api.infrastructure.ServerError
import com.tellenn.artifacts.api.infrastructure.MultiValueMap
import com.tellenn.artifacts.api.infrastructure.PartConfig
import com.tellenn.artifacts.api.infrastructure.RequestConfig
import com.tellenn.artifacts.api.infrastructure.RequestMethod
import com.tellenn.artifacts.api.infrastructure.ResponseType
import com.tellenn.artifacts.api.infrastructure.Success
import com.tellenn.artifacts.api.infrastructure.toMultiValue

class MyAccountApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Change Password
     * Change your account password. Changing the password reset the account token.
     * @param changePassword 
     * @return ResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun changePasswordMyChangePasswordPost(changePassword: ChangePassword) : ResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = changePasswordMyChangePasswordPostWithHttpInfo(changePassword = changePassword)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Change Password
     * Change your account password. Changing the password reset the account token.
     * @param changePassword 
     * @return ApiResponse<ResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun changePasswordMyChangePasswordPostWithHttpInfo(changePassword: ChangePassword) : ApiResponse<ResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = changePasswordMyChangePasswordPostRequestConfig(changePassword = changePassword)

        return@withContext request<ChangePassword, ResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation changePasswordMyChangePasswordPost
     *
     * @param changePassword 
     * @return RequestConfig
     */
    fun changePasswordMyChangePasswordPostRequestConfig(changePassword: ChangePassword) : RequestConfig<ChangePassword> {
        val localVariableBody = changePassword
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/my/change_password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Account Details
     * Fetch account details.
     * @return MyAccountDetailsSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAccountDetailsMyDetailsGet() : MyAccountDetailsSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getAccountDetailsMyDetailsGetWithHttpInfo()

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MyAccountDetailsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Account Details
     * Fetch account details.
     * @return ApiResponse<MyAccountDetailsSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAccountDetailsMyDetailsGetWithHttpInfo() : ApiResponse<MyAccountDetailsSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAccountDetailsMyDetailsGetRequestConfig()

        return@withContext request<Unit, MyAccountDetailsSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAccountDetailsMyDetailsGet
     *
     * @return RequestConfig
     */
    fun getAccountDetailsMyDetailsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/my/details",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Bank Details
     * Fetch bank details.
     * @return BankResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getBankDetailsMyBankGet() : BankResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getBankDetailsMyBankGetWithHttpInfo()

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BankResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Bank Details
     * Fetch bank details.
     * @return ApiResponse<BankResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getBankDetailsMyBankGetWithHttpInfo() : ApiResponse<BankResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getBankDetailsMyBankGetRequestConfig()

        return@withContext request<Unit, BankResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getBankDetailsMyBankGet
     *
     * @return RequestConfig
     */
    fun getBankDetailsMyBankGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/my/bank",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Bank Items
     * Fetch all items in your bank.
     * @param itemCode Item to search in your bank. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageSimpleItemSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getBankItemsMyBankItemsGet(itemCode: kotlin.String? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageSimpleItemSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getBankItemsMyBankItemsGetWithHttpInfo(itemCode = itemCode, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageSimpleItemSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Bank Items
     * Fetch all items in your bank.
     * @param itemCode Item to search in your bank. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageSimpleItemSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getBankItemsMyBankItemsGetWithHttpInfo(itemCode: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageSimpleItemSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getBankItemsMyBankItemsGetRequestConfig(itemCode = itemCode, page = page, size = size)

        return@withContext request<Unit, DataPageSimpleItemSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getBankItemsMyBankItemsGet
     *
     * @param itemCode Item to search in your bank. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getBankItemsMyBankItemsGetRequestConfig(itemCode: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (itemCode != null) {
                    put("item_code", listOf(itemCode.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/my/bank/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Ge Sell History
     * Fetch your sales history of the last 7 days.
     * @param id Order ID to search in your history. (optional)
     * @param code Item to search in your history. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageGeOrderHistorySchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getGeSellHistoryMyGrandexchangeHistoryGet(id: kotlin.String? = null, code: kotlin.String? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageGeOrderHistorySchema = withContext(Dispatchers.IO) {
        val localVarResponse = getGeSellHistoryMyGrandexchangeHistoryGetWithHttpInfo(id = id, code = code, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageGeOrderHistorySchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ge Sell History
     * Fetch your sales history of the last 7 days.
     * @param id Order ID to search in your history. (optional)
     * @param code Item to search in your history. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageGeOrderHistorySchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getGeSellHistoryMyGrandexchangeHistoryGetWithHttpInfo(id: kotlin.String?, code: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageGeOrderHistorySchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getGeSellHistoryMyGrandexchangeHistoryGetRequestConfig(id = id, code = code, page = page, size = size)

        return@withContext request<Unit, DataPageGeOrderHistorySchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGeSellHistoryMyGrandexchangeHistoryGet
     *
     * @param id Order ID to search in your history. (optional)
     * @param code Item to search in your history. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getGeSellHistoryMyGrandexchangeHistoryGetRequestConfig(id: kotlin.String?, code: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (id != null) {
                    put("id", listOf(id.toString()))
                }
                if (code != null) {
                    put("code", listOf(code.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/my/grandexchange/history",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Ge Sell Orders
     * Fetch your sell orders details.
     * @param code The code of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageGEOrderSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getGeSellOrdersMyGrandexchangeOrdersGet(code: kotlin.String? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageGEOrderSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getGeSellOrdersMyGrandexchangeOrdersGetWithHttpInfo(code = code, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageGEOrderSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ge Sell Orders
     * Fetch your sell orders details.
     * @param code The code of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageGEOrderSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getGeSellOrdersMyGrandexchangeOrdersGetWithHttpInfo(code: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageGEOrderSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getGeSellOrdersMyGrandexchangeOrdersGetRequestConfig(code = code, page = page, size = size)

        return@withContext request<Unit, DataPageGEOrderSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGeSellOrdersMyGrandexchangeOrdersGet
     *
     * @param code The code of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getGeSellOrdersMyGrandexchangeOrdersGetRequestConfig(code: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (code != null) {
                    put("code", listOf(code.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/my/grandexchange/orders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
