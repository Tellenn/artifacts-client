/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.tellenn.artifacts.api.models.AddCharacterSchema
import com.tellenn.artifacts.api.models.CharacterResponseSchema
import com.tellenn.artifacts.api.models.DeleteCharacterSchema

import com.fasterxml.jackson.annotation.JsonProperty

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.tellenn.artifacts.api.infrastructure.ApiClient
import com.tellenn.artifacts.api.infrastructure.ApiResponse
import com.tellenn.artifacts.api.infrastructure.ClientException
import com.tellenn.artifacts.api.infrastructure.ClientError
import com.tellenn.artifacts.api.infrastructure.ServerException
import com.tellenn.artifacts.api.infrastructure.ServerError
import com.tellenn.artifacts.api.infrastructure.MultiValueMap
import com.tellenn.artifacts.api.infrastructure.PartConfig
import com.tellenn.artifacts.api.infrastructure.RequestConfig
import com.tellenn.artifacts.api.infrastructure.RequestMethod
import com.tellenn.artifacts.api.infrastructure.ResponseType
import com.tellenn.artifacts.api.infrastructure.Success
import com.tellenn.artifacts.api.infrastructure.toMultiValue

class CharactersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Create Character
     * Create new character on your account. You can create up to 5 characters.
     * @param addCharacterSchema 
     * @return CharacterResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createCharacterCharactersCreatePost(addCharacterSchema: AddCharacterSchema) : CharacterResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = createCharacterCharactersCreatePostWithHttpInfo(addCharacterSchema = addCharacterSchema)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharacterResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Character
     * Create new character on your account. You can create up to 5 characters.
     * @param addCharacterSchema 
     * @return ApiResponse<CharacterResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createCharacterCharactersCreatePostWithHttpInfo(addCharacterSchema: AddCharacterSchema) : ApiResponse<CharacterResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createCharacterCharactersCreatePostRequestConfig(addCharacterSchema = addCharacterSchema)

        return@withContext request<AddCharacterSchema, CharacterResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCharacterCharactersCreatePost
     *
     * @param addCharacterSchema 
     * @return RequestConfig
     */
    fun createCharacterCharactersCreatePostRequestConfig(addCharacterSchema: AddCharacterSchema) : RequestConfig<AddCharacterSchema> {
        val localVariableBody = addCharacterSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/characters/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Character
     * Delete character on your account.
     * @param deleteCharacterSchema 
     * @return CharacterResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteCharacterCharactersDeletePost(deleteCharacterSchema: DeleteCharacterSchema) : CharacterResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = deleteCharacterCharactersDeletePostWithHttpInfo(deleteCharacterSchema = deleteCharacterSchema)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharacterResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Character
     * Delete character on your account.
     * @param deleteCharacterSchema 
     * @return ApiResponse<CharacterResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun deleteCharacterCharactersDeletePostWithHttpInfo(deleteCharacterSchema: DeleteCharacterSchema) : ApiResponse<CharacterResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = deleteCharacterCharactersDeletePostRequestConfig(deleteCharacterSchema = deleteCharacterSchema)

        return@withContext request<DeleteCharacterSchema, CharacterResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteCharacterCharactersDeletePost
     *
     * @param deleteCharacterSchema 
     * @return RequestConfig
     */
    fun deleteCharacterCharactersDeletePostRequestConfig(deleteCharacterSchema: DeleteCharacterSchema) : RequestConfig<DeleteCharacterSchema> {
        val localVariableBody = deleteCharacterSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/characters/delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Character
     * Retrieve the details of a character.
     * @param name The character name.
     * @return CharacterResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCharacterCharactersNameGet(name: kotlin.String) : CharacterResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getCharacterCharactersNameGetWithHttpInfo(name = name)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharacterResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Character
     * Retrieve the details of a character.
     * @param name The character name.
     * @return ApiResponse<CharacterResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getCharacterCharactersNameGetWithHttpInfo(name: kotlin.String) : ApiResponse<CharacterResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getCharacterCharactersNameGetRequestConfig(name = name)

        return@withContext request<Unit, CharacterResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharacterCharactersNameGet
     *
     * @param name The character name.
     * @return RequestConfig
     */
    fun getCharacterCharactersNameGetRequestConfig(name: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters/{name}".replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
