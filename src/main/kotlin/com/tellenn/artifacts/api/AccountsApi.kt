/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.tellenn.artifacts.api.models.AccountDetailsSchema
import com.tellenn.artifacts.api.models.AchievementType
import com.tellenn.artifacts.api.models.AddAccountSchema
import com.tellenn.artifacts.api.models.CharactersListSchema
import com.tellenn.artifacts.api.models.DataPageAccountAchievementSchema
import com.tellenn.artifacts.api.models.PasswordResetConfirmSchema
import com.tellenn.artifacts.api.models.PasswordResetRequestSchema
import com.tellenn.artifacts.api.models.PasswordResetResponseSchema
import com.tellenn.artifacts.api.models.ResponseSchema

import com.fasterxml.jackson.annotation.JsonProperty

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.tellenn.artifacts.api.infrastructure.ApiClient
import com.tellenn.artifacts.api.infrastructure.ApiResponse
import com.tellenn.artifacts.api.infrastructure.ClientException
import com.tellenn.artifacts.api.infrastructure.ClientError
import com.tellenn.artifacts.api.infrastructure.ServerException
import com.tellenn.artifacts.api.infrastructure.ServerError
import com.tellenn.artifacts.api.infrastructure.MultiValueMap
import com.tellenn.artifacts.api.infrastructure.PartConfig
import com.tellenn.artifacts.api.infrastructure.RequestConfig
import com.tellenn.artifacts.api.infrastructure.RequestMethod
import com.tellenn.artifacts.api.infrastructure.ResponseType
import com.tellenn.artifacts.api.infrastructure.Success
import com.tellenn.artifacts.api.infrastructure.toMultiValue

class AccountsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Create Account
     * 
     * @param addAccountSchema 
     * @return ResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createAccountAccountsCreatePost(addAccountSchema: AddAccountSchema) : ResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = createAccountAccountsCreatePostWithHttpInfo(addAccountSchema = addAccountSchema)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Account
     * 
     * @param addAccountSchema 
     * @return ApiResponse<ResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createAccountAccountsCreatePostWithHttpInfo(addAccountSchema: AddAccountSchema) : ApiResponse<ResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createAccountAccountsCreatePostRequestConfig(addAccountSchema = addAccountSchema)

        return@withContext request<AddAccountSchema, ResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createAccountAccountsCreatePost
     *
     * @param addAccountSchema 
     * @return RequestConfig
     */
    fun createAccountAccountsCreatePostRequestConfig(addAccountSchema: AddAccountSchema) : RequestConfig<AddAccountSchema> {
        val localVariableBody = addAccountSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/accounts/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Forgot Password
     * Request a password reset.
     * @param passwordResetRequestSchema 
     * @return PasswordResetResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun forgotPasswordAccountsForgotPasswordPost(passwordResetRequestSchema: PasswordResetRequestSchema) : PasswordResetResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = forgotPasswordAccountsForgotPasswordPostWithHttpInfo(passwordResetRequestSchema = passwordResetRequestSchema)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PasswordResetResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Forgot Password
     * Request a password reset.
     * @param passwordResetRequestSchema 
     * @return ApiResponse<PasswordResetResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun forgotPasswordAccountsForgotPasswordPostWithHttpInfo(passwordResetRequestSchema: PasswordResetRequestSchema) : ApiResponse<PasswordResetResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = forgotPasswordAccountsForgotPasswordPostRequestConfig(passwordResetRequestSchema = passwordResetRequestSchema)

        return@withContext request<PasswordResetRequestSchema, PasswordResetResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation forgotPasswordAccountsForgotPasswordPost
     *
     * @param passwordResetRequestSchema 
     * @return RequestConfig
     */
    fun forgotPasswordAccountsForgotPasswordPostRequestConfig(passwordResetRequestSchema: PasswordResetRequestSchema) : RequestConfig<PasswordResetRequestSchema> {
        val localVariableBody = passwordResetRequestSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/accounts/forgot_password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Account
     * Retrieve the details of a character.
     * @param account The account name.
     * @return AccountDetailsSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAccountAccountsAccountGet(account: kotlin.String) : AccountDetailsSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getAccountAccountsAccountGetWithHttpInfo(account = account)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountDetailsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Account
     * Retrieve the details of a character.
     * @param account The account name.
     * @return ApiResponse<AccountDetailsSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAccountAccountsAccountGetWithHttpInfo(account: kotlin.String) : ApiResponse<AccountDetailsSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAccountAccountsAccountGetRequestConfig(account = account)

        return@withContext request<Unit, AccountDetailsSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAccountAccountsAccountGet
     *
     * @param account The account name.
     * @return RequestConfig
     */
    fun getAccountAccountsAccountGetRequestConfig(account: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/accounts/{account}".replace("{"+"account"+"}", encodeURIComponent(account.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Account Achievements
     * Retrieve the achievements of a account.
     * @param account The character name.
     * @param type Type of achievements. (optional)
     * @param completed Filter by completed achievements. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageAccountAchievementSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAccountAchievementsAccountsAccountAchievementsGet(account: kotlin.String, type: AchievementType? = null, completed: kotlin.Boolean? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageAccountAchievementSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getAccountAchievementsAccountsAccountAchievementsGetWithHttpInfo(account = account, type = type, completed = completed, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageAccountAchievementSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Account Achievements
     * Retrieve the achievements of a account.
     * @param account The character name.
     * @param type Type of achievements. (optional)
     * @param completed Filter by completed achievements. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageAccountAchievementSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAccountAchievementsAccountsAccountAchievementsGetWithHttpInfo(account: kotlin.String, type: AchievementType?, completed: kotlin.Boolean?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageAccountAchievementSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAccountAchievementsAccountsAccountAchievementsGetRequestConfig(account = account, type = type, completed = completed, page = page, size = size)

        return@withContext request<Unit, DataPageAccountAchievementSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAccountAchievementsAccountsAccountAchievementsGet
     *
     * @param account The character name.
     * @param type Type of achievements. (optional)
     * @param completed Filter by completed achievements. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getAccountAchievementsAccountsAccountAchievementsGetRequestConfig(account: kotlin.String, type: AchievementType?, completed: kotlin.Boolean?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (completed != null) {
                    put("completed", listOf(completed.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/accounts/{account}/achievements".replace("{"+"account"+"}", encodeURIComponent(account.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Account Characters
     * Account character lists.
     * @param account The character name.
     * @return CharactersListSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAccountCharactersAccountsAccountCharactersGet(account: kotlin.String) : CharactersListSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getAccountCharactersAccountsAccountCharactersGetWithHttpInfo(account = account)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharactersListSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Account Characters
     * Account character lists.
     * @param account The character name.
     * @return ApiResponse<CharactersListSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAccountCharactersAccountsAccountCharactersGetWithHttpInfo(account: kotlin.String) : ApiResponse<CharactersListSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAccountCharactersAccountsAccountCharactersGetRequestConfig(account = account)

        return@withContext request<Unit, CharactersListSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAccountCharactersAccountsAccountCharactersGet
     *
     * @param account The character name.
     * @return RequestConfig
     */
    fun getAccountCharactersAccountsAccountCharactersGetRequestConfig(account: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/accounts/{account}/characters".replace("{"+"account"+"}", encodeURIComponent(account.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Reset Password
     * Reset password with a token. Use /forgot_password to get a token by email.
     * @param passwordResetConfirmSchema 
     * @return PasswordResetResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun resetPasswordAccountsResetPasswordPost(passwordResetConfirmSchema: PasswordResetConfirmSchema) : PasswordResetResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = resetPasswordAccountsResetPasswordPostWithHttpInfo(passwordResetConfirmSchema = passwordResetConfirmSchema)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PasswordResetResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Reset Password
     * Reset password with a token. Use /forgot_password to get a token by email.
     * @param passwordResetConfirmSchema 
     * @return ApiResponse<PasswordResetResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun resetPasswordAccountsResetPasswordPostWithHttpInfo(passwordResetConfirmSchema: PasswordResetConfirmSchema) : ApiResponse<PasswordResetResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = resetPasswordAccountsResetPasswordPostRequestConfig(passwordResetConfirmSchema = passwordResetConfirmSchema)

        return@withContext request<PasswordResetConfirmSchema, PasswordResetResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation resetPasswordAccountsResetPasswordPost
     *
     * @param passwordResetConfirmSchema 
     * @return RequestConfig
     */
    fun resetPasswordAccountsResetPasswordPostRequestConfig(passwordResetConfirmSchema: PasswordResetConfirmSchema) : RequestConfig<PasswordResetConfirmSchema> {
        val localVariableBody = passwordResetConfirmSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/accounts/reset_password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
