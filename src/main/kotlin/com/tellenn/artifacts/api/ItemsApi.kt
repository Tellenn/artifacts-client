/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.tellenn.artifacts.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.tellenn.artifacts.api.models.CraftSkill
import com.tellenn.artifacts.api.models.DataPageItemSchema
import com.tellenn.artifacts.api.models.ItemResponseSchema
import com.tellenn.artifacts.api.models.ItemType

import com.fasterxml.jackson.annotation.JsonProperty

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import com.tellenn.artifacts.api.infrastructure.ApiClient
import com.tellenn.artifacts.api.infrastructure.ApiResponse
import com.tellenn.artifacts.api.infrastructure.ClientException
import com.tellenn.artifacts.api.infrastructure.ClientError
import com.tellenn.artifacts.api.infrastructure.ServerException
import com.tellenn.artifacts.api.infrastructure.ServerError
import com.tellenn.artifacts.api.infrastructure.MultiValueMap
import com.tellenn.artifacts.api.infrastructure.PartConfig
import com.tellenn.artifacts.api.infrastructure.RequestConfig
import com.tellenn.artifacts.api.infrastructure.RequestMethod
import com.tellenn.artifacts.api.infrastructure.ResponseType
import com.tellenn.artifacts.api.infrastructure.Success
import com.tellenn.artifacts.api.infrastructure.toMultiValue

class ItemsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Get All Items
     * Fetch items details.
     * @param name Name of the item. (optional)
     * @param minLevel Minimum level items. (optional)
     * @param maxLevel Maximum level items. (optional)
     * @param type Type of items. (optional)
     * @param craftSkill Skill to craft items. (optional)
     * @param craftMaterial Item code of items used as material for crafting. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageItemSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAllItemsItemsGet(name: kotlin.String? = null, minLevel: kotlin.Int? = null, maxLevel: kotlin.Int? = null, type: ItemType? = null, craftSkill: CraftSkill? = null, craftMaterial: kotlin.String? = null, page: kotlin.Int? = 1, size: kotlin.Int? = 50) : DataPageItemSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getAllItemsItemsGetWithHttpInfo(name = name, minLevel = minLevel, maxLevel = maxLevel, type = type, craftSkill = craftSkill, craftMaterial = craftMaterial, page = page, size = size)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataPageItemSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get All Items
     * Fetch items details.
     * @param name Name of the item. (optional)
     * @param minLevel Minimum level items. (optional)
     * @param maxLevel Maximum level items. (optional)
     * @param type Type of items. (optional)
     * @param craftSkill Skill to craft items. (optional)
     * @param craftMaterial Item code of items used as material for crafting. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse<DataPageItemSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAllItemsItemsGetWithHttpInfo(name: kotlin.String?, minLevel: kotlin.Int?, maxLevel: kotlin.Int?, type: ItemType?, craftSkill: CraftSkill?, craftMaterial: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : ApiResponse<DataPageItemSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAllItemsItemsGetRequestConfig(name = name, minLevel = minLevel, maxLevel = maxLevel, type = type, craftSkill = craftSkill, craftMaterial = craftMaterial, page = page, size = size)

        return@withContext request<Unit, DataPageItemSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllItemsItemsGet
     *
     * @param name Name of the item. (optional)
     * @param minLevel Minimum level items. (optional)
     * @param maxLevel Maximum level items. (optional)
     * @param type Type of items. (optional)
     * @param craftSkill Skill to craft items. (optional)
     * @param craftMaterial Item code of items used as material for crafting. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return RequestConfig
     */
    fun getAllItemsItemsGetRequestConfig(name: kotlin.String?, minLevel: kotlin.Int?, maxLevel: kotlin.Int?, type: ItemType?, craftSkill: CraftSkill?, craftMaterial: kotlin.String?, page: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (minLevel != null) {
                    put("min_level", listOf(minLevel.toString()))
                }
                if (maxLevel != null) {
                    put("max_level", listOf(maxLevel.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (craftSkill != null) {
                    put("craft_skill", listOf(craftSkill.toString()))
                }
                if (craftMaterial != null) {
                    put("craft_material", listOf(craftMaterial.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Item
     * Retrieve the details of a item.
     * @param code The code of the item.
     * @return ItemResponseSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getItemItemsCodeGet(code: kotlin.String) : ItemResponseSchema = withContext(Dispatchers.IO) {
        val localVarResponse = getItemItemsCodeGetWithHttpInfo(code = code)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ItemResponseSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Item
     * Retrieve the details of a item.
     * @param code The code of the item.
     * @return ApiResponse<ItemResponseSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getItemItemsCodeGetWithHttpInfo(code: kotlin.String) : ApiResponse<ItemResponseSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getItemItemsCodeGetRequestConfig(code = code)

        return@withContext request<Unit, ItemResponseSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getItemItemsCodeGet
     *
     * @param code The code of the item.
     * @return RequestConfig
     */
    fun getItemItemsCodeGetRequestConfig(code: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/items/{code}".replace("{"+"code"+"}", encodeURIComponent(code.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
